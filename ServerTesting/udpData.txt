{'Frequency Raw Data': 
{0: 
{'frequency': 100.0, 
'data': {'Start Time': [0.0, 44.67899999997371, 76.6349999999818, 107.9639999999813, 138.8069999999857], 
'Return Time': [19.998999999984335, 63.50799999998458, 96.4609999999766, 123.17499999997494, 154.11799999998266], 
'Recieved Time': [1.95399999998358, 46.358999999995376, 77.5199999999927, 109.10199999997872, 140.03599999998073], 
'Sending Time': [18.964999999980137, 63.50799999998458, 96.4609999999766, 122.16199999997457, 154.11799999998266], 
'Client-Server Time': [1.95399999998358, 1.6800000000216642, 0.8850000000109048, 1.1379999999974189, 1.2289999999950396], 
'Server-Client Time': [1.0340000000041982, -0.0, -0.0, 1.0130000000003747, -0.0], 
'Round Trip Time': [19.998999999984335, 18.829000000010865, 19.825999999994792, 15.210999999993646, 15.310999999996966]}}, 

1: 
{'frequency': 550.0, 
'data': {'Start Time': [0.0, 30.88299999998867, 62.11999999999307, 92.89400000000114, 124.9819999999886], 
'Return Time': [14.960000000002083, 49.88199999999665, 81.79100000000972, 112.81399999998598, 144.2130000000077], 
'Recieved Time': [1.9519999999886295, 31.878000000006068, 63.15599999999222, 93.78300000000195, 126.06600000000867], 
'Sending Time': [14.960000000002083, 49.88199999999665, 80.78000000000429, 112.81399999998598, 144.2130000000077], 
'Client-Server Time': [1.9519999999886295, 0.9950000000173986, 1.0359999999991487, 0.8890000000008058, 1.084000000020069], 
'Server-Client Time': [-0.0, -0.0, 1.0110000000054242, -0.0, -0.0], 
'Round Trip Time': [14.960000000002083, 18.99900000000798, 19.671000000016647, 19.91999999998484, 19.231000000019094]}}}, 


'Frequency Responce': 
{'Frequency': [100.0, 550.0], 'means': [17.83519999999612, 18.55620000000613], 'stds': [2.1396712270805405, 1.82684486478812]}}




[100.0, 190.0, 280.0, 370.0, 460.0, 550.0, 640.0, 730.0, 820.0, 910.0]
{   
 100.0: [13.711000000057538, 13.658000000077664, 13.145000000122309, 12.818000000152097, 12.271999999938998],
 190.0: [12.300000000095679, 13.020000000096843, 16.81800000005751,  13.473999999860098, 11.499000000185333],
 280.0: [14.635999999882188, 14.044000000012602, 13.702999999850363, 12.348999999858279, 12.341999999989639],
 370.0: [14.019999999845822, 17.98499999995329,  14.822999999978492, 12.75900000018737,  12.156000000004497],
 460.0: [13.123999999834268, 12.780000000020664, 14.163000000053216, 13.110999999980777, 11.852000000089902],
 550.0: [14.014999999972133, 13.246999999864784, 14.490000000023429, 13.009000000010928, 11.70799999999872],
 640.0: [13.200999999980922, 13.552000000117914, 14.515999999957785, 13.281999999890104, 12.413999999807857],
 730.0: [13.730000000123255, 15.681999999969776, 11.994999999842548, 12.575999999853593, 12.705999999980122],
 820.0: [14.748000000054162, 13.916999999992186, 14.104999999972279, 14.556000000084168, 12.87000000002081],
 910.0: [13.271000000031563, 15.525000000025102, 13.185000000021319, 12.355999999954292, 12.721000000055938]
} 




def normalSliders(x, y1, y2, chartTitle, xTitle, y1Title, y2Title, y1colour='r', y2colour='b'):
    #y1 and y2 need to be in the form {frequency: [samples]}, in order for the mean to be calculated
    
    fig, ax = plt.subplots()
    mu1, std1 = norm.fit(y1[x[0]])
    mu2, std2 = norm.fit(y2[x[0]])
    #print(norm.fit(y1[x[0]]))
    #xmin, xmax = plt.xlim()
    print(plt.xlim())
    xSpace = np.linspace(0, 100, 100)
    p = norm.pdf(xSpace, mu1, std1)
    q = norm.pdf(xSpace, mu2, std2)

    
    fig.subplots_adjust(bottom=0.25)
    l1 = ax.plot(xSpace, p, lw=2)
    #l2 = ax.plot(xSpace, q, lw=2)

    ax_freq = fig.add_axes([0.25, 0.1, 0.65, 0.03])

 
    sfreq = Slider(
    ax_freq, "Frequency", x[0], x[len(x)-1],
    valinit=x[1], valstep=(x[1]-x[0]),
    initcolor='none'  # Remove the line marking the valinit position.
    )

    def update(val):
        freq = sfreq.val
        #print(freq)
        mu1, std1 = norm.fit(y1[x[0]])
        mu2, std2 = norm.fit(y2[x[0]])
        #xmin, xmax = plt.xlim()
        xSpace = np.linspace(0, 100, 100)
        l1.set_ydata(norm.pdf(xSpace, mu1, std1))
        #l2.set_ydata(norm.pdf(xSpace, mu2, std2))
        fig.canvas.draw_idle()

    sfreq.on_changed(update)

